[{"categories":["Tutorials"],"contents":"Linux SSH Zugang richtig absichern Das A und O wenn ihr einen Linux-Server betreibt, ist es meistens für die Administration erforderlich, einen sichereren Zugang via SSH zu etablieren.\nDieses Tutorial soll euch helfen, den Linux SSH Zugriff erfolgreich gegen Angriffe zu schützen.\nNatürlich ist das Absichern des SSH-Zugangs nur ein Modul, um euren Server vor Angriffe zu schützen. Weitere Möglichkeiten findet ihr im Tutorial „Raspberry Pi absichern von A-Z“ welches ich hier im Blog veröffentlicht habe.\nVideo-Tutorial zum Thema ‚Linux SSH absichern‘ Weitere Videos zum Thema Linux Server absichern Dieses Tutorial ist ein Bestandteil einer Video-Serie rund um das Thema ‚Linux Server absichern‘.\nGerne könnt ihr auch auf YouTube die vollständige Playlist zum Thema anschauen. Hier werden regelmäßig immer neue Videos zur Thematik hinzugefügt.\nZur Playlist https://www.youtube.com/playlist?list=PLknVEQKqt1ln-5HL8aG_Xk0bDeitgt0j_\nHowTo – Linux SSH-Zugang richtig absichern SSH ist ein beliebtes Protokoll, um sich auf entfernten Servern anzumelden und Befehle auszuführen. Doch wie kann man sicherstellen, dass nur berechtigte Personen Zugriff auf den SSH-Dienst haben? In diesem Tutorial möchte ich euch einige Tipps und Tricks vorstellen, wie man seinen SSH-Zugang richtig absichern kann.\nSchritt 1 Linux SSH absichern – Standard-Port des SSH-Diensts ändern Die meistens Angriffe auf den SSH-Port (Port 22) finden automatisiert statt. Daher kann entsprechend einer Port-Änderung des SSH-Ports diese Angriffsmethode ein wenig erschwert werden. Daher zeige ich euch, wie ihr entsprechend den Standard-SSH-Port ändern könnt.\nUm den Standard-SSH-Port ändern zu können, ist es erforderlich diesen in der Config-Datei des SSH-Dienstes abzuändern.\nHierzu öffnet ihr wie in diesem Beispiel mit dem Editor ‚Nano‘ die Konfigurationsdatei die sich auf dem Pfad ‚/etc/ssh/sshd_config‚ befindet.\n\u0026#x26a0;\u0026#xfe0f; WICHTIG! Firewall-Regeln anpassen! Solltet ihr schon Firewall-Regeln auf eurem Server aktiviert haben, müsst ihr diese entsprechend eurem gewählten Port um diese Regel ergänzen! Ansonsten sperrt ihr euch aus und habt keinen Zugriff mehr via SSH!\n# Öffnen der SSH-Config-Datei sudo nano /etc/ssh/sshd_config Nachdem aufrufen des oben genannten Befehls, sollte sich ein Editor-Fenster mit folgendem Inhalt öffnen:\nLinux Datei sshd_config\nIn der Zeile \u0026rsquo;#Port 22‘ entfernt ihr das #-Zeichen (dadurch wird die Funktion / Ziele aktiviert) und ersetzt die Standard-Portnummer durch eure gewählte Portnummer. In diesem Fall ist es Port 2223. Jetzt noch die Änderung mit der Tastenkombination \u0026lsquo;STRG+O\u0026rsquo; speichern und den Editor mit \u0026lsquo;STRG+X\u0026rsquo; verlassen.\nDamit die Änderungen übernommen werden, muss der SSH-Service neu gestartet werden.\n# SSH-Service neustarten sudo systemctl restart ssh # Status und Port des SSH-Service überprüfen sudo systemctl status ssh # Hier muss jetzt erscheinen, dass der Service \u0026#39;enabled\u0026#39; ist und weiter unten in der Ausgabe wird dann der Listening-Port angegeben Überprüfung der Möglichkeit einer SSH-Anmeldung auf dem neuen Port Hierzu öffnet ihr ein neues Terminalfenster und meldet euch per SSH unter Angabe des neuen Ports auf dem Server an.\n# Anmeldung SSH mit Portangabe ssh root@IP-Adresse -p 2223 # Der Port sowie die IP-Adresse müssen durch eure entsprechenden und gewählten Angaben ergänzt werden. Geänderter SSH-Port nicht erreichbar\nSollte die SSH-Port-Änderung nicht funktionieren, also der SSH-Zugang ist über den neuen Port nicht erreichbar, dann bitte die folgenden Befehle eingeben. Dieser Fehler kann beispielsweise bei einem Debian-Proxmox-Container auftauchen. Hier wird bei der Änderung des Ports in der sshd_config nicht automatisch übernommen und der Zugriff über den Standard-Port 22 ist immer noch möglich.\nsystemctl disable ssh.socket systemctl stop ssh.socket reboot Eine Liste der standardisierten sowie dynamischen Ports findet ihr zum Beispiel hier im entsprechenden Wikipedia-Post:\nhttps://de.wikipedia.org/wiki/Liste_der_standardisierten_Ports\nSchritt 2 Linux SSH absichern – SSH-Schlüsselpaar erzeugen \u0026#x26a0;\u0026#xfe0f; WICHTIGER HINWEIS!\nVorab sei erwähnt, dass ihr nur die beiden Methoden RSA 4096 bit (ab 3072 bit oder höher) sowie Ed25519 zur Schlüsselerzeugung nutzen solltet. Ich persönlich nutze immer Ed25519 (basierend auf einer elliptischen Kurve) zusammen mit einem extra Passphrase (zusätzliches Passwort) als zweiten Faktor und würde es auch so empfehlen.\nSSH-Schlüsselpaar unter Linux und macOS erzeugen Öffne ein Terminalfenster und gebe hier den folgenden Befehl ein um eine Schlüsseldatei mittels Ed25519 mit zusätzlichem Passwort sowie mit zusätzlichem Schutz vor Brute Force-Attacken zu erstellen und zu schützen.\n# Erstellen eines Schlüsselpaars basierend auf Ed25519 + Passwort und Brute-Force-Schutz ssh-keygen -o -a 100 -t ed25519 # Ausgabe: Generating public/private ed25519 key pair. Enter file in which to save the key (/root/.ssh/id_ed25519): Enter passphrase (empty for no passphrase): (hier euer gewünschtes Passwort vergeben) Enter same passphrase again: (hier das Passwort wiederholen) # Dann wird das Schlüsselpaar erzeugt, und ist über den Pfad \u0026#39;/root/.ssh/id_ed25519\u0026#39; für den privaten Schlüssel, sowie den public_key unter \u0026#39;/root/.ssh/id_ed25519.pub\u0026#39;, zu finden. \u0026#x26a0;\u0026#xfe0f; WICHTIGER HINWEIS!\nDer Schlüssel mit der Endung id_ed25519 ist der private Schlüssel und darf niemals herausgegeben werden!\nDen privaten Schlüssel bitte sicher aufbewahren und zum Beispiel im Passwort-Manager ‚Bitwarden‘ ablegen, oder auf einen verschlüsselten USB-Stick abspeichern und sicher aufbewahren. Ohne diesen privaten Schlüssel habt ihr bei Verlust, keinen Zugriff mehr auf euren Server!\nZum Exportieren ist nur die Schlüsseldatei mit der Endung .pub zu verwenden!!!\nSSH-Schlüsselpaar unter Windows erzeugen Ab Windows 10 in Version 1809, ist ein SSH-Client standardmäßig installiert und ihr könnt somit gleich mit der Schlüsselerzeugung loslegen.\nHierzu gibt ihr in der PowerShell oder auch im Microsoft Terminal (welches ich auch immer in den Videos nutze), mit Administrationsrechte, den folgenden Befehl in der Kommandozeile ein:\n# Erstellen eines Schlüsselpaars basierend auf Ed25519 + Passwort und Brute-Force-Schutz unter Windows ssh-keygen -o -a 100 -t ed25519 # Ausgabe: Enter passphrase (empty for no passphrase): \u0026lt;hier euer sicheres Passwort eingeben\u0026gt; Enter same passphrase again: \u0026lt;Passwort bestätigen\u0026gt; Your identification has been saved in C:Usersusername/.ssh/id_ed25519. \u0026lt;username = Ersetzen durch euren Benutzername\u0026gt; Your public key has been saved in C:Usersusername/.ssh/id_ed25519.pub. \u0026lt;username = Ersetzen durch euren Benutzername\u0026gt; The key fingerprint is: Beispiel: SHA256:OIzc1yE7joL2Bzy8!gS0j8eGK7bYaH1FmF3sDuMeSj8 username@LOCAL-HOSTNAME Schritt 3 Linux SSH absichern – SSH-Public_key auf den Remote-Server kopieren Damit in Zukunft eine Anmeldung auf dem Linux-Server mit einem Schlüsselpaar möglich ist, muss der public_key auf dem Remote-Server zunächst kopiert / mitgeteilt werden.\nGespeichert wird dieser public_key bei dem anzumeldenden Nutzer in der Datei ‚.ssh/authorized_keys‘. Diese findet ihr im Wurzelverzeichnis ‚cd .ssh‘.\nSollte das Verzeichnis ‚.ssh/‘ nicht vorhanden sein, dann bitte auf dem Remote-Server mit dem folgenden Befehl anlegen:\nmkdir .ssh/\nVoraussetzung um den Public_Key auf den Remote-Server zu installieren ist es, dass ihr berechtigt seid, dass ihr euch mit Benutzername und Passwort auf dem Remote-Server anmelden könnt! public_key in die Datei ‚.ssh/authorized_keys‘ kopieren unter Windows-Powershell / Microsoft Terminal\nUm den Kopiervorgang des public_key auf den Remote-Server zu starten, gibt ihr bittags: [\u0026ldquo;Linux\u0026rdquo;] categories: [\u0026ldquo;Tutorials\u0026rdquo;]te den folgenden Befehl ein:\n# Key via Powershell auf einen Remote-Server kopieren type $env:USERPROFILE.sshid_ed25519.pub | ssh remoteuser@IP-AdresseRemote-Server \u0026#34;cat \u0026gt;\u0026gt; .ssh/authorized_keys\u0026#34; # Der \u0026lt;remoteuser\u0026gt; wird durch den User auf dem Remote-Server ersetzt, mit dem ihr euch dort Anmelden wollt # Die \u0026lt;IP-AdresseRemote-Server\u0026gt; wird durch die IP-Adresse von eurem Remote-Server ersetzt public_key in die Datei ‚.ssh/authorized_keys‘ kopieren unter Linux / macOS\nTIPP!\nVoraussetzung um den Public_Key auf den Remote-Server zu installieren ist es, dass ihr berechtigt seid, dass ihr euch mit Benutzername und Passwort auf dem Remote-Server anmelden könnt!\nUm unter Linux und macOS (basiert ja auch auf ein Unix-System) den public_key auf den Remote-Server zu kopieren, öffnet ihr ein Terminalfenster und gibt den folgernden Befehl ein:\n# Das Attribut -p gibt den SSH-Port des Remote Server an ssh-copy-id -i .ssh/id_ed25519.pub -p 2223 remoteuser@IP-AdresseRemote-Server Überprüfung der authorized_keys auf dem Remote-Server Zu guter Letzt, müssen wir unbedingt die Datei ‚authorized_keys‘ auf dem Remote-Server überprüfen, ob hier auch wirklich der öffentliche Schlüssel als Eintrag hinzugefügt wurde!\nDazu meldet ihr euch per Benutzer + Passwort auf dem Remote-Server an und ruft den Inhalt der Datei ‚authorized_keys‘ mit folgendem Befehl auf:\n# Inhalt der Datei \u0026#39;authorized_keys\u0026#39; anzeigen nano .ssh/authorized_keys # Ausgabe: Die Ausgabe des Editor-Fenster sollte wie folgt aussehen beziehungsweise beginnen: ssh-ed25519 AAAAC3N........ Schritt 4 Linux SSH absichern – SSH-Anmeldung via SSH-Schlüssel aktivieren Nachdem der Public_Key auf dem Remote-Server erfolgreich kopiert sowie überprüft wurde, können wir jetzt die Anmeldemethode via Schlüsselpaar auf diesem Server aktivieren.\nHierzu werden wir die Config-Datei ’sshd_config‘ entsprechend anpassen.\n# Anpassen der SSH-Config-Datei auf dem Remote-Server # Öffnen der sshd-config sudo nano /etc/ssh/sshd_config # Nun im Editor-Fenster die folgende Zeile auf \u0026#39;Yes\u0026#39; setzen und da #-Zeichen entfernen PubkeyAuthentication yes # Des Weiteren muss noch überprüft werden, ob der richtige Pfad zu der Datei \u0026#39;authorized_keys\u0026#39; angeben und auch aktiviert ist # Hierfür muss die Zeile für diese Datei wie folgt aussehen sowie das Zeichen \u0026#39;#\u0026#39; entfernt sein: AuthorizedKeysFile .ssh/authorized_keys # Dann die Datei mit \u0026#39;STRG+O\u0026#39; die Eingaben speichern und mit \u0026#39;STRG+X\u0026#39; das Editor-Fenster verlassen. Nach diesen Veränderungen an der ’sshd_config‘ muss noch der SSH-Dienst neu gestartet werden:\n# SSH-Service neu starten, um die Änderungen zu übernehmen sudo systemctl restart ssh # Bei Red-Had-basierenden Distributionen wie CentOS, Fedora, Rocky Linux usw. ist der Service \u0026#39;sshd\u0026#39; neu zu starten sudo service sshd restart Schritt 5 Linux SSH absichern – SSH-Anmeldung mit Schlüsselpaar überprüfen Um jetzt den SSH-Zugang via SSH-Schlüssel zu überprüfen, melden wir uns an dem Remote-Server genauso wie gewohnt an:\n# Anmeldung via SSH-Schlüssel an den Remote-Server ssh benutzer@IP-AdresseRemoteServer # Solltet ihr euch zum ersten Mal mit diesem Benutzer am Remote-Server anmelden, erhaltet ihr die folgende Abfrage: The authenticity of host \u0026#39;IP-Adresse des Remote-Server\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:ElsjpajVayeK. This key is not known by any other names Are you sure you want to continue connecting (yes/no/[fingerprint])? # Hier müsst ihr dann mit \u0026#39;yes\u0026#39; bestätigen und dann den Passphrase (euer Passwort zum oben erstellten SSH-Schlüssel) eingeben Enter passphrase for key \u0026#39;C:Usersmarcel/.ssh/id_ed25519\u0026#39;: \u0026lt;Passwort für den SSH-Schlüssel eingeben\u0026gt; # Nun solltet ihr mit dem Remote-Server verbunden sein Schritt 6 Linux SSH absichern – Linux SSH absichern durch Deaktivieren der Anmeldung durch Passwort ACHTUNG!\nDiesen Schritt nur durchführen, wenn die Anmeldung via SSH-Schlüssel funktioniert hat und ihr einen weiteren Benutzer mit erhöhten Rechten wie im Beitrag ‚Raspberry Pi absichern von A -Z‚ angelegt habt!\nAnsonsten sperrt ihr euch vom Server aus!\nNach erfolgreicher Anmeldung mit dem SSH-Schlüssel können wir nun endlich die unsichere Anmeldung mittels Passworts beim Remote-Server deaktivieren.\nDazu müssen wir wieder eine Anpassung an der ’sshd_config‘ vornehmen und auch gleichzeitig wie im nächsten Abschnitt beschrieben, die Anmeldung als ‚root-user‘ deaktivieren.\n# SSH-Anmeldung mittels Passworts am Remote-Server deaktivieren sudo nano /etc/ssh/sshd_config # sshd_config-Datei zum Bearbeiten öffnen # Die folgende Zeile \u0026#39;#PasswordAuthentication yes\u0026#39; in \u0026#39;PasswordAuthentication no\u0026#39; abändern # Und mit \u0026#39;STRG+O\u0026#39; speichern und mit \u0026#39;Strg+X\u0026#39; den Editor verlassen # SSH-Dienst neu Starten sudo systemctl restart ssh Natürlich könnt ihr die Änderungen vom nächsten Absatz in diesem Tutorial gleich mit ändern, aber zur Verständlichkeit werde ich extra alle Schritte einzeln durchführen!\nSchritt 7 Linux SSH absichern – Anmeldung als Root-User via SSH deaktivieren Ein wirklich wichtiger Sicherheitsaspekt bei der Absicherung des SSH-Zugangs ist es, dass der volle root-Zugang via SSH-Zugang deaktiviert wird! Dieses gilt nicht nur für die Anmeldung via SSH-Schlüssel auf dem Remote-Server wie wir es in diesem Tutorial gelernt haben, sondern sollte immer in der ’sshd_config-Datei‘ deaktiviert werden.\nEin fremder Nutzer der sich mit zum Beispiel gestohlenen Anmeldedaten auf eurem Server via SSH anmelden kann und dann gleich alles Privilegien für Änderungen hat, ist der absolute Alptraum!\nUm diesen Alptraum zu vermeiden, öffnen wir wieder die Konfigurationsdatei für den SSH-Dienst und passen diese wie folgt an:\n# Anmeldung als Root-User via SSH-Verbindung deaktivieren sudo nano /etc/ssh/sshd_config # Im Editor-Fenster nun die Zeile \u0026#39;#PermitRootLogin\u0026#39; in \u0026#39;PermitRootLogin no\u0026#39; ändern # Dann wieder die Änderungen speichern und den SSH-Dienst neustarten sudo systemctl restart ssh Schritt 8 Linux SSH absichern – Neueste Protokolle zur Authentifizierung erzwingen Ein weiterer Schritt um die Sicherheit der SSH-Anmeldung zu erhöhen ist es, die Erzwingung der Nutzung der neuesten Protokolle (SSH-Protocol-Version 2) zur Anmeldung zu nutzen.\nHierfür muss natürlich wieder die SSH-Config-Datei angepasst werden und der SSH-Dienst neu gestartet werden.\n# Folgende Einträge sollten in der SSH-Config-Datei noch hinzugefügt bzw. angepasst werden. ChallengeResponseAuthentication no # und UsePAM no # Dann wieder den SSH-Dienst neu starten sudo systemctl restart ssh Fazit – Linux SSH absichern Wir haben in diesem Tutorial gelernt, wie wir den SSH-Zugang zu einem Linux-Server effektiv und nach neustem Stand der Technik vor Angriffe schützen können.\nIch kann nur jedem ans Herz legen, alle SSH-Zugänge (auch im internen Netzwerk) so abzusichern! Weiterhin habt ihr noch die Möglichkeit Brute Force-Attacken auf den SSH-Service mit zum Beispiel ‚Fail2ban‘ zu schützen. Wie das funktioniert, habe ich euch ja schon in dem Tutorial ‚Raspberry Pi absichern von A-Z | 2023‚ (funktioniert bei allen debian-basierten Systemen) gezeigt und habe auf eine Wiederholung in diesem Tutorial darauf verzichtet.\nWichtig ist noch zu erwähnen, dass diese in diesem Tutorial behandelte Methode nur eine Möglichkeit widerspiegelt, einen Linux-Server richtig abzusichern. Also nur ein Baustein in der IT-Sicherheit ist!\nSollte euch dieses Tutorial ein wenig gefallen haben, so würde ich mich über ein Abo von meinem YouTube-Kanal sehr freuen!\n","date":"July 5, 2025","hero":"/images/posts/linux-ssh/SSH-absichern.png","permalink":"https://test.secure-bits.org/posts/linux/linux-ssh-absichern/","summary":"\u003ch2 id=\"linux-ssh-zugang-richtig-absichern\"\u003eLinux SSH Zugang richtig absichern\u003c/h2\u003e\n\u003cp\u003eDas A und O wenn ihr einen Linux-Server betreibt, ist es meistens für die Administration erforderlich, einen sichereren Zugang via SSH zu etablieren.\u003c/p\u003e\n\u003cp\u003eDieses Tutorial soll euch helfen, den Linux SSH Zugriff erfolgreich gegen Angriffe zu schützen.\u003c/p\u003e\n\u003cp\u003eNatürlich ist das Absichern des SSH-Zugangs nur ein Modul, um euren Server vor Angriffe zu schützen. Weitere Möglichkeiten findet ihr im Tutorial „Raspberry Pi absichern von A-Z“ welches ich hier im Blog veröffentlicht habe.\u003c/p\u003e","tags":["Linux","Security"],"title":"Linux SSH-Zugang absichern"},{"categories":null,"contents":"Der vollständige Beitrag folgt in Kürze\u0026hellip; ","date":"February 18, 2025","hero":"/images/default-hero.jpg","permalink":"https://test.secure-bits.org/posts/security/linux-ssh-absichern/","summary":"\u003ch3 id=\"der-vollständige-beitrag-folgt-in-kürze\"\u003eDer vollständige Beitrag folgt in Kürze\u0026hellip;\u003c/h3\u003e","tags":null,"title":"Post 1"},{"categories":null,"contents":"Der vollständige Beitrag folgt in Kürze\u0026hellip; ","date":"February 18, 2025","hero":"/images/default-hero.jpg","permalink":"https://test.secure-bits.org/posts/security/proxmox-fail2ban/","summary":"\u003ch3 id=\"der-vollständige-beitrag-folgt-in-kürze\"\u003eDer vollständige Beitrag folgt in Kürze\u0026hellip;\u003c/h3\u003e","tags":null,"title":"Post2"},{"categories":["Tutorials"],"contents":"Proxmox VE basierend auf Debian 12 mit fail2ban absichern Eine Möglichkeit einen öffentlichen Proxmox Server gegen Brute Force-Angriffe abzusichern, ist der Einsatz von dem Tool ‚fail2ban‘.\nIn diesem kurzen Tutorial zeige ich, wie mit Hilfe von fail2ban, der Zugriff des Service ‚SSH‘ und der Zugriff auf den Port ‚8006‘ des Dashboards, abgesichert wird. Ausgangslage\nIn diesem Szenario handelt es sich um einen Proxmox-Server der als Dedicated-Server bei Hetzner gehostet wird, und über eine IPv4- sowie IPv6-Adresse über das öffentliche Internet erreichbar ist.\nGenerell ist der Einsatz von fail2ban nur als ein Teil von Sicherheitsmaßnahmen zur Serverabsicherung anzusehen. Gerne könnt ihr auch weitere Sicherungsmaßnahmen hier auf meinem Blog zur Rate ziehen.\nGutschein\nWer auch einen VPS- / Root- / Dedicated-Server betrieben möchte, dem kann ich ein 20 Euro Gutschein anbieten. Um diesen Gutschein zu nutzen, auf den untenstehenden Link klicken. Der Gutschein in Höhe von 20 Euro, ist nur bei einer Neuregistrierung auf der Hetzner-Webseite nutzbar!\nLink zum Gutschein: https://hetzner.cloud/?ref=OBFauh7A1Ru8\nInstallation von fail2ban unter Debian 12 WICHTIGER HINWEIS!\nBitte beachten, dass alle weiter ausgeführten Befehle mit erhöhten Privilegien ausgeführt werden!\nDiese Rechte erhaltet ihr wenn ihr einmalig für die bestehende SSH-Sitzung den folgenden Befehl ausführt:\nsudo -s\nDa Proxmox VE ja auf der Distrubution Debian basiert, erfolgt die Installation von fail2ban genauso wie bei einem klassischen Debian-Installation.\nWir haben zwei Möglichkeiten, um die Einrichtung von fail2ban auf dem Proxmox-System vorzunehmen.\nEinrichtung über das Dashboard von Proxmox.\nFür die Einrichtung über dem Dashboard von Proxmox, klickt ihr auf den Proxmox-Node und wählt hier den Punkt ‚Shell‘ aus und gibt hier dann die entsprechenden Eingaben für die Konfiguration ein.\nEinrichtung via Terminal über eine SSH-Verbindung zum Proxmox-Server.\nIn meinem Beispiel werden wir uns über ein Terminal via SSH mit dem Proxmox-Server verbinden. Vorteil ist hierbei der besserer Komfort, wie z.B. bei der Nutzung von Copy \u0026amp; Paste.\nFür die Einrichtung über dem Dashboard von Proxmox, klickt ihr auf den Proxmox-Node und wählt hier den Punkt ‚Shell‘ aus und gibt hier dann die entsprechenden Eingaben für die Konfiguration ein.\nProxmox Dashboard\nSSH-Verbindung via Terminal mit dem Proxmox-Server Zunächst stellen wir eine Verbindung via SSH mit dem Proxmox-Server her. Hierfür könnt ihr je nach Betriebssystem ein Terminal-Fenster, Putty oder ähnliches nutzen.\n# SSH-Verbindung aufbauen ssh root@\u0026lt;IP-Adresse-Proxmox-Server\u0026gt; Aktualisieren des Betriebssystems sowie Installation von fail2ban # System aktualisieren sudo apt update \u0026amp;\u0026amp; apt upgrade -y # Installation von fail2ban sudo apt install fail2ban Anpassung der fail2ban-Konfiguration für Proxmox VE Wie in der Einführung von diesem Tutorial beschreiben, wollen wir den Standard-SSH-Port (22) sowie den Port 8006 für das Dashboard-Interface von Proxmox VE vor Brute Force-Attacken schützen.\nZunächst legen wir uns dafür eine lokale Jail-Config-Datei im fail2ban-Verzeichnis an, in der wir dann die Anpassung für unser Vorhaben hinterlegen.\n# Zunächst werden wir uns # Aufrufen des Verzeichnis von fail2ban, in der sich die künftige sowie weitere Konfigurations-Dateien befinden cd /etc/fail2ban # Anlegen der Config-Datei für fail2ban nano jail.conf Im nächsten Schritt fügen wir die Konfiguration für die Absicherung des SSH-Verbindung sowie die Absicherung für den Port 8006 ein.\n# Konfiguration für fail2ban - Absicherung SSH (Standard-Port 22) und Dashboard-Zugriff Proxmox (Port 8006) # Default-Einstellungen für fail2ban [DEFAULT] allowipv6 = auto bantime = 3600 backend = systemd ignoreip = 127.0.0.1/8 # Config für SSH [sshd] mode = aggressive port = ssh logpath = %(sshd_log)s banaction = nftables-multiport banaction_allports = nftables-allports backend = systemd enabled = true maxretry = 2 findtime = 3600 bantime = 3h # Config für Proxmox [proxmox] enabled = true port = https,http,8006 filter = proxmox backend = systemd maxretry = 3 findtime = 3600 bantime = 3h Nun die Config-Datei ‚jail-local‘ mit STRG + O speichern und mit STRG + X den Nano-Editor schließen\nIgnore IP\nUnter ‚ignoreip‚ habt ihr die Möglichkeit, IP-Adressen, Subnets als Ausnahmen hinzuzufügen, um so zum Beispiel zu verhindern, dass ihr euch selbst aussperrt.\nProxmox-Filter für fail2ban anlegen Eine Filter-Config für SSH ist standardmäßig in fail2ban enthalten. Die Filter-Config für Proxmox müssen wir zunächst erst erstellen.\nDazu wechseln wir in das Verzeichnis ‚/etc/fail2ban/filter.d‘ und legen hier mit ’nano proxmox.conf‘ die Filter-Config für Proxmox an.\n# Filter-Config proxmox [Definition] failregex = pvedaemon\\[.*authentication failure; rhost=\u0026lt;HOST\u0026gt; user=.* msg=.* ignoreregex = journalmatch = _SYSTEMD_UNIT=pvedaemon.service Auch diese Datei mit STRG + O speichern und mit STRG + X den Editor verlassen.\nfail2ban-Dienst starten und prüfen Da wir die erforderlichen Config-Dateien nun angelegt haben, können wir nun dazu übergehen und fail2ban auf dem System starten.\n# fail2ban Autostart aktivieren, Dienst starten systemctl enable fail2ban systemctl start fail2ban # fail2ban Status überprüfen systemctl status fail2ban Ausgabe sollte dann in etwas so aussehen:\nfail2ban status systemctl\nEin paar ergänzende Befehle für fail2ban Alternative zu fail2ban\nEine Alternative zu fail2ban wird mit der Application ‚crowdsec‘ angeboten. Crowdsec funktioniert im Prinzip gleich wie fail2ban, wird aber durch zentral geführte dynamische Listen ergänzt. Nachteil ist aber hierbei, dass eine öffentliche Verbindung zu diesem Dienst etabliert wird. Weitere Informationen zu ‚crowdsec‘ findet hier:\nhttps://www.crowdsec.net/\nIch hoffe, dieses Tutorial bringt für manche unter euch einen Mehrwert und hilft bei der Absicherung eurer Proxmox-Server-Instanz!\nGerne könnt ihr mir auch im Forum oder hier in den Kommentaren ein Feedback hinterlassen. Weitere Information zu fail2ban\nhttps://wiki.ubuntuusers.de/fail2ban/\nhttps://de.wikipedia.org/wiki/Fail2ban\nHier noch eine paar Befehle, mit der ihr die Möglichkeit habt, fail2ban zu ’steuern‘.\nAnzeigen der gebannten IP-Adressen # Gebannte IP-Adressen für SSH fail2ban-client status sshd # Gebannte IP-Adressen für Proxmox fail2ban-client status proxmox Hier eine Beispiel-Ausgabe über die gebannte IP-Adressen, die versucht haben, sich via SSH anzumelden.\nfail2ban-client status sshd\nGebannte IP-Adresse aus der jail-list entfernen # IP-Adresse von der der Liste der gebannten IP-Adressen entfernen # Für SSH fail2ban-client set sshd unbanip \u0026lt;IP-Adresse\u0026gt; # Für Proxmox fail2ban-client set proxmox unbanip \u0026lt;IP-Adresse\u0026gt; Fazit – Proxmox VE mit fail2ban absichern Wie in diesem Tutorial gesehen, ist die Absicherung vor Brute-Force-Angriffe für einen Proxmox-Server eigentlich ziemlich trival und im Betrieb, dadurch eine sehr gute Absicherung.\nWeiterhin ist fail2ban auch für andere betriebenen Dienste wie zum Beispiel nginx, apache2, eigene Bitwarden-Instanz, etc. zur Absicherung genutzt werden oder aber, man erstellt selbst eine filter-Config wie in diesem Tutorial für Proxmox geschehen.\nMeine persönliche Meinung zu fail2ban\nFür mich persönlich ist der Einsatz von fail2ban zur Absicherung einer Server-Instanz, ein ganz klares „Muss“ und ergänzt mit dem Einsatz das Sicherheits-Schichten-Prinzip für einen sicheren Betrieb von öffentlichen Diensten.\nAlternative zu fail2ban Eine Alternative zu fail2ban wird mit der Application ‚crowdsec‘ angeboten. Crowdsec funktioniert im Prinzip gleich wie fail2ban, wird aber durch zentral geführte dynamische Listen ergänzt. Nachteil ist aber hierbei, dass eine öffentliche Verbindung zu diesem Dienst etabliert wird. Weitere Informationen zu ‚crowdsec‘ findet hier:\nhttps://www.crowdsec.net/\nIch hoffe, dieses Tutorial bringt für manche unter euch einen Mehrwert und hilft bei der Absicherung eurer Proxmox-Server-Instanz!\nGerne könnt ihr mir auch im Forum oder hier in den Kommentaren ein Feedback hinterlassen.\nWeitere Information zu fail2ban https://wiki.ubuntuusers.de/fail2ban/\nhttps://de.wikipedia.org/wiki/Fail2ban\n","date":"February 18, 2025","hero":"/images/posts/proxmox-fail2ban/proxmox_und_fail2ban.png","permalink":"https://test.secure-bits.org/posts/linux/proxmox-fail2ban/","summary":"\u003ch2 id=\"proxmox-ve-basierend-auf-debian-12-mit-fail2ban-absichern\"\u003eProxmox VE basierend auf Debian 12 mit fail2ban absichern\u003c/h2\u003e\n\u003cp\u003eEine Möglichkeit einen öffentlichen Proxmox Server gegen Brute Force-Angriffe abzusichern, ist der Einsatz von dem Tool ‚fail2ban‘.\u003c/p\u003e\n\u003cp\u003eIn diesem kurzen Tutorial zeige ich, wie mit Hilfe von fail2ban, der Zugriff des Service ‚SSH‘ und der Zugriff auf den Port ‚8006‘ des Dashboards, abgesichert wird.\nAusgangslage\u003c/p\u003e\n\u003cp\u003eIn diesem Szenario handelt es sich um einen Proxmox-Server der als Dedicated-Server bei Hetzner gehostet wird, und über eine IPv4- sowie IPv6-Adresse über das öffentliche Internet erreichbar ist.\u003c/p\u003e","tags":["Linux","Security","Proxmox"],"title":"Proxmox VE mit fail2ban absichern"}]